import numpy as np

from typing import Any, List, Literal, Tuple, Dict
from numpy.typing import NDArray

import pandas as pd
import re


class ReadAMBER:
    """
    Read AMBER simulation files.

    Attributes
    ----------

    logfiles : List[str]
        Paths to the log files generated by an AMBER temperature replica exchange
        simulation.

    outfiles : List[str]
        Paths to output files generated by an AMBER simulation.

    temperatures : float
        The temperatures in the ladder used for temperature replica exchange.

    ex_num : int
        Number of exchanges completed in the simulation.

    num_reps : int
        Number of replicas (is equal to len(temperatures)).

    df_exchng : pandas.Dataframe
        Pandas dataframe containing information from the log file.
        Contains the following fields
        1. Replica number
        2. Velocity Scaling
        3. Instantaneous temperature (initial)
        4 .Potential energy
        5. Initial thermostat
        6. Final thermostat (after exchange)
        7. Avergage success rate ((i, i+1))
        8. Reservoir structure number

        Average success rate is calculated as #successes/#triesÃ—2, as mentioned
        in the AMBER manual. Success rates are calculated between initial
        temperature of the replica and the next highest temperature.

    df_out : pandas.Dataframe
        Pandas dataframe containing information from the out file.
        Contains the following fields
        1.  NSTEP
        2.  TIME(PS)
        3.  TEMP(K)
        4.  PRESS
        5.  Etot
        6.  EKtot
        7.  EPtot
        8.  BOND
        9.  ANGLE
        10.  DIHED
        11.  1-4 NB
        12.  1-4 EEL
        13.  VDWAALS
        14.  EELEC
        15.  EHBOND
        16.  RESTRAINT


    Methods
    -------

    __init__
        Constructor

    read_AMBER_Logs
        Read AMBER temperature replica exchange logfile.

    read_AMBER_out
        Read AMBER generated out files. To process out files from replica
        exchange simulations, one can extract elements on the basis of
        thermostat temperature from the generate dataframe (key : TEMP0).

    __get_trex_params
        Get number of replicas, number of exchanges that were completed and
        the thermostat temperatures once the log file is read.

    generate_log_info
        Generate log information from AMBER temperature replica exchange
        logfile.

    generate_out_info
        Generate output information from the AMBER out file.

    """

    def __init__(
        self, logfiles: List[str] | None = None, outfiles: List[str] | None = None
    ):
        """Parsing log/out files."""

        self.temperatures: NDArray[np.float64] | None = None
        self.ex_nums = 0
        self.num_reps = 0

        self.df_exchng: pd.DataFrame | None = None
        self.df_out: pd.DataFrame | None = None

        if logfiles:
            self.logfiles = logfiles
            self.read_AMBER_log()

        if outfiles:
            self.outfiles = outfiles
            self.read_AMBER_out()

    def _get_trex_params(self, df_exchng: pd.DataFrame) -> int:
        """
        Extract the thermostat temperatures, number of complete exchanges and
        number of replicas from AMBER replica exchange log file.

        Args
        ----
        df_exchng : pd.DataFrame
            The dataframe generated from one log file.

        Returns
        -------
        ex_num : int
            Number of exchanges completed in this simulation or extension.
        """

        if not self.num_reps:
            self.num_reps = df_exchng["Rep number"].nunique()
        else:
            assert self.num_reps == df_exchng["Rep number"].nunique(), (
                "Replica count mismatch."
            )

        if not self.temperatures:
            self.temperatures = df_exchng["Temp0"].unique()
        else:
            assert np.all(np.equal(self.temperatures, df_exchng["Temp0"].unique())), (
                "Thermostat mismatch."
            )

        temp = set(df_exchng["Rep number"].value_counts().values)
        ex_num = min(temp)

        return ex_num

    def read_AMBER_log(self) -> None:
        """Parse the AMBER log file."""

        try:
            all_df_exchng = []

            for logfile in self.logfiles:
                names = [
                    "Rep number",
                    "Velocity Scaling",
                    "T",
                    "Eptot",
                    "Temp0",
                    "NewTemp0",
                    "Success rate ((i, i+1))",
                    "ResStruct number",
                ]
                types = dict(
                    zip(names, [int, float, float, float, float, float, float, int])
                )

                df_exchng = pd.read_table(
                    logfile, sep=r"\s+", comment="#", names=names, dtype=types
                )

                # Extract
                ex_num = self._get_trex_params(df_exchng)

                # In case the log file contains incomplete simulations
                # (say, because the simulation was forcibly ended by
                # the job scheduler)
                _incomplete_sims = len(df_exchng) % self.num_reps

                df_exchng.drop(df_exchng.tail(_incomplete_sims).index, inplace=True)

                df_exchng.insert(
                    loc=0,
                    column="Exchange number",
                    value=np.repeat(np.arange(1, ex_num + 1, dtype=int), self.num_reps),
                )
                all_df_exchng.append(df_exchng)
                self.ex_nums += ex_num

            self.df_exchng = pd.concat(all_df_exchng, ignore_index=True)

        except pd.errors.ParserError:
            raise RuntimeError(
                "'{}' cannot be read as AMBER T-REMD log file.".format(self.logfiles)
            )

        except FileNotFoundError:
            raise FileNotFoundError("'{}' not found.".format(self.logfiles))

        except:
            print("Something happened and I don't know what it is. -_-")
            raise

    def read_AMBER_out(self) -> None:
        """Read the AMBER out files given the file paths."""
        
        try:
            all_df_out = []
            for outfile in self.outfiles:
                with open(outfile, "r") as f:
                    raw = f.read()

                all_dat_pattern = r"(?<=RESULTS\n)(.*?)(?=A V E R A G E S|$)"
                line_pattern = r"([A-Za-z0-9\-\s\(\)]+?)\s*=\s*([+-]?\d+\.?\d*)"

                mdout_dat = re.search(all_dat_pattern, raw, re.DOTALL).group(1)
                split2frames = re.split("-{2,}\n", mdout_dat)[1:-1]

                out_dict: Dict = {}

                for block in split2frames:
                    block = block.strip()

                    for block_line in block.split("\n"):
                        vals = re.findall(line_pattern, block_line)

                        for key, val in vals:
                            if key.strip() not in out_dict.keys():
                                out_dict[key.strip()] = [float(val)]
                            else:
                                out_dict[key.strip()].append(float(val))
                all_df_out.append(pd.DataFrame(out_dict))

            self.df_out = pd.concat(all_df_out, ignore_index=True)

        except FileNotFoundError:
            raise FileNotFoundError("'{}' not found.".format(self.logfiles))

        except:
            print("placeholder for error")
            raise

    def generate_log_info(self, pass_all: bool = False) -> List:
        """
        Returns the relevant information in a list

        Parameters
        ----------

        pass_all:bool
            By default, the function only returns exchange number, replica
            number, initial thermostat, final thermostat, success rate (running
            average) in the exchange dataframe. The total potential energy,
            velocity scaling, replica number and instantaneous temperature are
            excluded. Set to True to return all columns of the log file.

        Returns
        -------

        TNE_df : List[List[float], int, int, pd.DataFrame]
            List containing temperatures, number of replicas exchange numbers,
            exchange dataframe.

        """
        assert self.df_exchng is not None, "No log files processed."

        if pass_all:
            TNE_df = [
                np.sort(self.temperatures),
                self.num_reps,
                self.ex_nums,
                self.df_exchng,
            ]
        else:
            TNE_df = [
                np.sort(self.temperatures),
                self.num_reps,
                self.ex_nums,
                self.df_exchng[
                    [
                        "Exchange number",
                        "Rep number",
                        "Temp0",
                        "NewTemp0",
                        "Success rate ((i, i+1))",
                    ]
                ],
            ]
        return TNE_df

    def generate_out_info(self) -> pd.DataFrame | None:
        """
        Returns the total energy, kinetic energy and potential energy
        in that order as a pandas dataframe
        """
        
        assert self.df_out is not None, "No out files processed."

        return self.df_out
